#!/usr/bin/env python
# -*- coding: utf-8 -*-
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: © 2021 Massachusetts Institute of Technology.
# SPDX-FileCopyrightText: © 2021 Lee McCuller <mcculler@mit.edu>
# NOTICE: authors should document their contributions in concisely in NOTICE
# with details inline in source files, comments, and docstrings.
"""
#
# wavestate documentation build configuration file, created by
# sphinx-quickstart on Sat Jul 15 21:40:50 2017.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
"""
# import os
# import sys
# sys.path.insert(0, os.path.abspath('.'))


# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    #'nbsphinx',
    "sphinx.ext.autodoc",
    "sphinx.ext.autosummary",
    "sphinx.ext.todo",
    "sphinx.ext.coverage",
    "sphinx.ext.mathjax",
    "sphinx.ext.githubpages",
    "sphinx.ext.napoleon",
    "sphinx.ext.viewcode",
    "sphinx.ext.linkcode",
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
source_suffix = [".rst", ".md"]

# The master toctree document.
master_doc = "index"

# General information about the project.
project = "wavestate"
copyright = "2021, Lee McCuller"
author = "Lee McCuller"
show_authors = False

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
import wavestate.collection

version = wavestate.collection.__version__
# The full version, including alpha/beta/rc tags.
release = wavestate.collection.__version__

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = ["_build", "**.ipynb_checkpoints"]

# The name of the Pygments (syntax highlighting) style to use.
# pygments_style = 'sphinx'
# pygments_style = 'colorful'
pygments_style = "default"

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True

# Autodoc settings
autodoc_default_flags = ["members", "undoc-members"]

# -- Options for sourcelinks
srclink_project = "https://github.com/wavestate/wavestate"
srclink_src_path = "src/wavestate/"
srclink_branch = "main"

# -- Options for HTML output ----------------------------------------------

# useful for downloading the ipynb files
html_sourcelink_suffix = ""


html_title = "wavestate documentation"
html_short_title = "wavestate"

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
# import sphinx_rtd_theme
# html_theme = "sphinx_rtd_theme"
# html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]

# import jupyter_sphinx_theme
# html_theme = "jupyter_sphinx_theme"
# html_theme_path = [jupyter_sphinx_theme.get_html_theme_path()]

html_theme = "alabaster"

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
html_theme_options = dict(
    description="Documentation for the wavestate physics toolkit",
    extra_nav_links={
        #'LIGO CDS repository' : 'https://git.ligo.org/CDS/dttxml'
    },
    show_powered_by=False,
    show_related=True,
    # page_width = 'auto',
)

napoleon_type_aliases = {
    # "CustomType": "mypackage.CustomType",
    # "dict-like": ":term:`dict-like <mapping>`",
}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["_static"]

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# This is required for the alabaster theme
# refs: http://alabaster.readthedocs.io/en/latest/installation.html#sidebars
html_sidebars = {
    "**": [
        "about.html",
        #'globaltoc.html',
        "navigation.html",
        "relations.html",
        "searchbox.html",
    ],
    #    'index': [
    #        'globaltoc.html',
    #        'navigation.html',
    #        'relations.html',
    #        'searchbox.html',
    #        'srclinks.html',
    #        ],
}

# Output file base name for HTML help builder.
htmlhelp_basename = "wavestate"

html_logo = 'logo/logo_ws_block.svg'


def setup(app):
    app.add_css_file("my_theme.css")
    app.add_css_file("pygments_adjust.css")

    # add the evennt handler to bond tests to their outputs
    app.connect('autodoc-process-docstring', autodoc_process_docstring)
    return


def linkcode_resolve(domain, info):
    if domain != 'py':
        return None
    if not info['module']:
        return None
    filename = info['module'].replace('.', '/')
    return "https://github.com/wavestate/wavestate/%s.py" % filename


autosummary_generate = True
autosummary_imported_members = False
autosummary_generate_overwrite = True

autodoc_mock_imports = ["pygraphviz", "pcaspy", ]


import os
import re
def autodoc_process_docstring(app, what, name, obj, options, lines):
    """Detects pytests and augments their documentation to include links to their output files
    """

    ":download:`this example script <../example.py>`"
    tdir = os.path.join(app.srcdir, 'test_results')

    if what == 'module':
        return

    if what != 'function':
        return

    try:
        ofile = obj.__code__.co_filename
    except AttributeError:
        return

    # check for unusual objects like DeepBunch
    if not isinstance(ofile, str):
        return

    fpath, fname = os.path.split(ofile)

    istest = False

    tpath = os.path.join(tdir, fname)
    if os.path.exists(tpath):
        istest = True

    tname = obj.__name__.split('.')[-1]
    # could also check if the containing module has pytest fixtures, but this seems to work

    if istest:
        # print("FOUND A TEST: ", name)
        # raise Exception("EXPLODE")
        tdirs = os.listdir(tpath)
        mydirs = []

        for subdir in tdirs:
            if '[' not in subdir:
                if subdir == tname:
                    mydirs.append(subdir)
            else:
                if re.fullmatch(re.escape(tname)+r'\[.*\]', subdir):
                    mydirs.append(subdir)

        if not lines:
            lines.append("This is a pytest needing documentation")
            lines.append("")
            lines.append("")

        if mydirs:
            print("COOL", mydirs)

        for d in mydirs:
            dpath = os.path.join(tpath, d)
            lines.append("")
            lines.append("{}".format(d))
            for fpath in os.listdir(dpath):
                print("APPEND")
                lines.append("- :download:`{}</{}>`".format(fpath, os.path.relpath(os.path.join(dpath, fpath), app.srcdir)))
                print(lines[-1])
    return

